CREATE TABLESPACE camping_rentals
DATAFILE 'camping_rentals_1.dat' SIZE 40M 
ONLINE; 

CREATE USER camping IDENTIFIED BY password ACCOUNT UNLOCK
DEFAULT TABLESPACE camping_rentals
QUOTA 20M ON camping_rentals;

CREATE ROLE applicationAdmin;

GRANT CONNECT, RESOURCE, CREATE VIEW, CREATE TRIGGER, CREATE PROCEDURE TO applicationAdmin;

GRANT applicationAdmin TO camping;

--------------------------------------------------------
--  DDL for Table CATEGORIES
--------------------------------------------------------

CREATE TABLE "CAMPING"."CATEGORIES" 
(
    "CATEGORYID" NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
    "CATEGORYNAME" VARCHAR2(50) NOT NULL, 
    "DESCRIPTION" VARCHAR2(100)
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  DDL for Table CUSTOMERS
--------------------------------------------------------

CREATE TABLE "CAMPING"."CUSTOMERS" 
(
    "CUSTOMERID" NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
    "PHONENUMBER" VARCHAR2(15), 
    "MEMBERSHIPSTATUS" VARCHAR2(20) NOT NULL, 
    "EMAILADDRESS" VARCHAR2(100 ), 
    CONSTRAINT "CHK_MEMBERSHIPSTATUS" CHECK (MEMBERSHIPSTATUS IN ('Pending', 'Expired', 'Active'))
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  DDL for Table EQUIPMENTS
--------------------------------------------------------

CREATE TABLE "CAMPING"."EQUIPMENTS" 
(
    "EQUIPMENTID" NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
    "EQUIPMENTNAME" VARCHAR2(100) NOT NULL, 
    "CATEGORYID" NUMBER NOT NULL, 
    "EQUIPMENTSTATUS" VARCHAR2(20) NOT NULL, 
    "BRANDNAME" VARCHAR2(50), 
    "RENTALPRICEPERDAY" NUMBER(10,2) NOT NULL, 
    "DEPOSITPRICE" NUMBER(10,2) NOT NULL, 
    "PURCHASEDATE" DATE, 
    "EQUIPMENTPRICE" NUMBER(10,2) NOT NULL,
    CONSTRAINT "CHK_EQUIPMENTSTATUS" CHECK (EQUIPMENTSTATUS IN ('Rented', 'In repair', 'Available'))
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  DDL for Table ORDERS
--------------------------------------------------------

CREATE TABLE "CAMPING"."ORDERS" 
(
    "ORDERID" NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
    "CUSTOMERID" NUMBER NOT NULL, 
    "ORDERCREATEDDATETIME" TIMESTAMP (6), 
    "ORDERSTATUS" VARCHAR2(20), 
    "HANDLINGSTAFFID" NUMBER NOT NULL, 
    "ORDERCOMPLETEDDATETIME" TIMESTAMP (6), 
    "TOTALAMOUNT" NUMBER(10,2), 
    "STARTDATE" DATE, 
    "ENDDATE" DATE, 
    "DEPOSITAMOUNT" NUMBER(10,2), 
    "TOTALRENTALAMOUNT" NUMBER(10,2), 
    "RENTALSTATUS" VARCHAR2(20), 
    "RETURNDATE" DATE, 
    "TOTALPENALTYAMOUNT" NUMBER(10,2), 
    "INSPECTIONSTAFFID" NUMBER, 
    "CANCELDATE" TIMESTAMP (6), 
    "CANCELREASON" VARCHAR2(200),
    CONSTRAINT "CHK_ORDERSTATUS" CHECK (OrderStatus IN ('Overdue', 'Pending', 'Completed', 'Cancelled')),
    CONSTRAINT "CHK_RENTALSTATUS" CHECK (RentalStatus IN ('Pending', 'Returned', 'Rented'))
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  DDL for Table ORDER_EQUIPMENT
--------------------------------------------------------

CREATE TABLE "CAMPING"."ORDER_EQUIPMENT" 
(
    "ORDERID" NUMBER NOT NULL, 
    "EQUIPMENTID" NUMBER NOT NULL, 
    "EQUIPMENTCONDITION" VARCHAR2(20) NOT NULL, 
    "PENALTYAMOUNT" NUMBER(10,2), 
    "REPAIRDATE" DATE, 
    "REPAIRCOST" NUMBER(10,2),
    PRIMARY KEY ("ORDERID", "EQUIPMENTID"),
    CONSTRAINT "CHK_EQUIPMENTCONDITION" CHECK (EquipmentCondition IN ('Lost', 'Damaged', 'Good'))
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  DDL for Table STAFFS
--------------------------------------------------------

CREATE TABLE "CAMPING"."STAFFS" 
(
    "STAFFID" NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
    "PHONENUMBER" VARCHAR2(15), 
    "HIREDATE" DATE NOT NULL, 
    "TERMINATIONDATE" DATE, 
    "POSITION" VARCHAR2(50) NOT NULL, 
    "EMPLOYMENTSTATUS" VARCHAR2(20) NOT NULL,
    CONSTRAINT "CHK_EMPLOYMENTSTATUS" CHECK (EmploymentStatus IN ('Terminated', 'Active')),
    CONSTRAINT "CHK_TERMINATIONDATE" CHECK ((TerminationDate IS NULL OR TerminationDate >= HireDate))
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  DDL for Table NAMES
--------------------------------------------------------

CREATE TABLE "CAMPING"."NAMES" 
(
    "NAMEID" NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, 
    "FIRSTNAME" VARCHAR2(50) NOT NULL, 
    "LASTNAME" VARCHAR2(50) NOT NULL
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  DDL for Table CUSTOMER_NAME
--------------------------------------------------------

CREATE TABLE "CAMPING"."CUSTOMER_NAME" 
(
    "NAMEID" NUMBER NOT NULL, 
    "CUSTOMERID" NUMBER NOT NULL, 
    "STARTDATE" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "ENDDATE" TIMESTAMP DEFAULT NULL,
    PRIMARY KEY ("NAMEID", "CUSTOMERID"),
    CONSTRAINT "CHK_CUSTOMER_NAME_ENDDATE" CHECK (ENDDATE IS NULL OR ENDDATE >= STARTDATE)
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  DDL for Table SATFF_NAME
--------------------------------------------------------

CREATE TABLE "CAMPING"."STAFF_NAME" 
(
    "NAMEID" NUMBER NOT NULL, 
    "STAFFID" NUMBER NOT NULL, 
    "STARTDATE" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "ENDDATE" TIMESTAMP DEFAULT NULL,
    PRIMARY KEY ("NAMEID", "STAFFID"),
    CONSTRAINT "CHK_STAFF_NAME_ENDDATE" CHECK (ENDDATE IS NULL OR ENDDATE >= STARTDATE)
) SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "CAMPING_RENTALS";

--------------------------------------------------------
--  Foreign Key Constraints
--------------------------------------------------------

ALTER TABLE "CAMPING"."EQUIPMENTS" ADD CONSTRAINT "FK_CATEGORYID" FOREIGN KEY ("CATEGORYID")
    REFERENCES "CAMPING"."CATEGORIES" ("CATEGORYID") ENABLE;

ALTER TABLE "CAMPING"."ORDERS" ADD CONSTRAINT "FK_CUSTOMERID" FOREIGN KEY ("CUSTOMERID")
    REFERENCES "CAMPING"."CUSTOMERS" ("CUSTOMERID") ENABLE;

ALTER TABLE "CAMPING"."ORDERS" ADD CONSTRAINT "FK_HANDLINGSTAFF" FOREIGN KEY ("HANDLINGSTAFFID")
    REFERENCES "CAMPING"."STAFFS" ("STAFFID") ENABLE;

ALTER TABLE "CAMPING"."ORDERS" ADD CONSTRAINT "FK_INSPECTIONSTAFF" FOREIGN KEY ("INSPECTIONSTAFFID")
    REFERENCES "CAMPING"."STAFFS" ("STAFFID") ENABLE;

ALTER TABLE "CAMPING"."ORDER_EQUIPMENT" ADD CONSTRAINT "FK_ORDERID" FOREIGN KEY ("ORDERID")
    REFERENCES "CAMPING"."ORDERS" ("ORDERID") ENABLE;

ALTER TABLE "CAMPING"."ORDER_EQUIPMENT" ADD CONSTRAINT "FK_EQUIPMENTID" FOREIGN KEY ("EQUIPMENTID")
    REFERENCES "CAMPING"."EQUIPMENTS" ("EQUIPMENTID") ENABLE;

ALTER TABLE "CAMPING"."STAFF_NAME" ADD CONSTRAINT "FK_STAFF_NAME_STAFFID" FOREIGN KEY ("STAFFID")
    REFERENCES "CAMPING"."STAFFS" ("STAFFID") ENABLE;

ALTER TABLE "CAMPING"."STAFF_NAME" ADD CONSTRAINT "FK_STAFF_NAME_NAMEID" FOREIGN KEY ("NAMEID")
    REFERENCES "CAMPING"."NAMES" ("NAMEID") ENABLE;

ALTER TABLE "CAMPING"."CUSTOMER_NAME" ADD CONSTRAINT "FK_CUSTOMER_NAME_CUSTOMERID" FOREIGN KEY ("CUSTOMERID")
    REFERENCES "CAMPING"."CUSTOMERS" ("CUSTOMERID") ENABLE;

ALTER TABLE "CAMPING"."CUSTOMER_NAME" ADD CONSTRAINT "FK_CUSTOMER_NAME_NAMEID" FOREIGN KEY ("NAMEID")
    REFERENCES "CAMPING"."NAMES" ("NAMEID") ENABLE;
    

connect camping/password;

SET SERVEROUTPUT ON;
SET FEEDBACK ON;
SET ECHO ON;

-- Create CUSTOMER_VIEW view
PROMPT Creating CUSTOMER_VIEW...
CREATE VIEW CUSTOMER_VIEW AS
SELECT C.CUSTOMERID, N.FIRSTNAME, N.LASTNAME, C.PHONENUMBER, C.MEMBERSHIPSTATUS, C.EMAILADDRESS
FROM CUSTOMERS C
LEFT JOIN CUSTOMER_NAME CN ON C.CUSTOMERID = CN.CUSTOMERID
LEFT JOIN NAMES N ON CN.NAMEID = N.NAMEID
WHERE CN.ENDDATE IS NULL;
/
-- Create INSTEAD OF trigger for INSERT operation on the view
PROMPT Creating CUSTOMER_VIEW_INSERT_TRIGGER...
CREATE OR REPLACE TRIGGER CUSTOMER_VIEW_INSERT_TRIGGER
INSTEAD OF INSERT ON CUSTOMER_VIEW
FOR EACH ROW
DECLARE
    v_customerid NUMBER;
    v_nameid NUMBER;
BEGIN
    -- Insert into CUSTOMERS table
    INSERT INTO CUSTOMERS (PHONENUMBER, MEMBERSHIPSTATUS, EMAILADDRESS)
    VALUES (:NEW.PHONENUMBER, :NEW.MEMBERSHIPSTATUS, :NEW.EMAILADDRESS)
    RETURNING CUSTOMERID INTO v_customerid;

    -- Insert into NAMES table
    INSERT INTO NAMES (FIRSTNAME, LASTNAME)
    VALUES (:NEW.FIRSTNAME, :NEW.LASTNAME)
    RETURNING NAMEID INTO v_nameid;

    -- Insert into CUSTOMER_NAME table to link name and customer
    INSERT INTO CUSTOMER_NAME (NAMEID, CUSTOMERID, STARTDATE)
    VALUES (v_nameid, v_customerid, CURRENT_TIMESTAMP);
END;
/

-- Create INSTEAD OF trigger for UPDATE operation on the view
PROMPT Creating CUSTOMER_VIEW_UPDATE_TRIGGER...
CREATE OR REPLACE TRIGGER CUSTOMER_VIEW_UPDATE_TRIGGER
INSTEAD OF UPDATE ON CUSTOMER_VIEW
FOR EACH ROW
DECLARE
    v_nameid NUMBER;
BEGIN
    -- Update CUSTOMERS table
    UPDATE CUSTOMERS
    SET PHONENUMBER = :NEW.PHONENUMBER,
        MEMBERSHIPSTATUS = :NEW.MEMBERSHIPSTATUS,
        EMAILADDRESS = :NEW.EMAILADDRESS
    WHERE CUSTOMERID = :OLD.CUSTOMERID;

    -- Update NAMES table and CUSTOMER_NAME table if name changes
    IF (:OLD.FIRSTNAME != :NEW.FIRSTNAME OR :OLD.LASTNAME != :NEW.LASTNAME) THEN
        -- Insert new name record
        INSERT INTO NAMES (FIRSTNAME, LASTNAME)
        VALUES (:NEW.FIRSTNAME, :NEW.LASTNAME)
        RETURNING NAMEID INTO v_nameid;

        -- Update CUSTOMER_NAME table to end old record and insert new link
        UPDATE CUSTOMER_NAME
        SET ENDDATE = CURRENT_TIMESTAMP
        WHERE CUSTOMERID = :OLD.CUSTOMERID AND ENDDATE IS NULL;

        INSERT INTO CUSTOMER_NAME (NAMEID, CUSTOMERID, STARTDATE)
        VALUES (v_nameid, :OLD.CUSTOMERID, CURRENT_TIMESTAMP);
    END IF;
END;
/

-- Create INSTEAD OF trigger for DELETE operation on the view
PROMPT Creating CUSTOMER_VIEW_DELETE_TRIGGER...
CREATE OR REPLACE TRIGGER CUSTOMER_VIEW_DELETE_TRIGGER
INSTEAD OF DELETE ON CUSTOMER_VIEW
FOR EACH ROW
BEGIN
    DECLARE
        v_nameid NUMBER;
    BEGIN
        -- Get all NAMEID linked to CUSTOMERID
        FOR name_rec IN (SELECT NAMEID FROM CUSTOMER_NAME WHERE CUSTOMERID = :OLD.CUSTOMERID) LOOP
            -- Delete links in CUSTOMER_NAME table
            DELETE FROM CUSTOMER_NAME WHERE NAMEID = name_rec.NAMEID;

            -- Delete records in NAMES table
            DELETE FROM NAMES WHERE NAMEID = name_rec.NAMEID;
        END LOOP;

        -- Delete record in CUSTOMERS table
        DELETE FROM CUSTOMERS WHERE CUSTOMERID = :OLD.CUSTOMERID;
    END;
END;
/

-- Create STAFF_VIEW view
PROMPT Creating STAFF_VIEW...
CREATE VIEW STAFF_VIEW AS
SELECT S.STAFFID, N.FIRSTNAME, N.LASTNAME, S.PHONENUMBER, S.HIREDATE, S.TERMINATIONDATE, S.POSITION, S.EMPLOYMENTSTATUS
FROM STAFFS S
LEFT JOIN STAFF_NAME SN ON S.STAFFID = SN.STAFFID
LEFT JOIN NAMES N ON SN.NAMEID = N.NAMEID
WHERE SN.ENDDATE IS NULL;
/
-- Create INSTEAD OF trigger for INSERT operation on the view
PROMPT Creating STAFF_VIEW_INSERT_TRIGGER...
CREATE OR REPLACE TRIGGER STAFF_VIEW_INSERT_TRIGGER
INSTEAD OF INSERT ON STAFF_VIEW
FOR EACH ROW
DECLARE
    v_staffid NUMBER;
    v_nameid NUMBER;
BEGIN
    -- Insert into STAFFS table
    INSERT INTO STAFFS (PHONENUMBER, HIREDATE, POSITION, EMPLOYMENTSTATUS)
    VALUES (:NEW.PHONENUMBER, :NEW.HIREDATE, :NEW.POSITION, :NEW.EMPLOYMENTSTATUS)
    RETURNING STAFFID INTO v_staffid;

    -- Insert into NAMES table
    INSERT INTO NAMES (FIRSTNAME, LASTNAME)
    VALUES (:NEW.FIRSTNAME, :NEW.LASTNAME)
    RETURNING NAMEID INTO v_nameid;

    -- Insert into STAFF_NAME table to link name and staff
    INSERT INTO STAFF_NAME (NAMEID, STAFFID, STARTDATE)
    VALUES (v_nameid, v_staffid, CURRENT_TIMESTAMP);
END;
/

-- Create INSTEAD OF trigger for UPDATE operation on the view
PROMPT Creating STAFF_VIEW_UPDATE_TRIGGER...
CREATE OR REPLACE TRIGGER STAFF_VIEW_UPDATE_TRIGGER
INSTEAD OF UPDATE ON STAFF_VIEW
FOR EACH ROW
DECLARE
    v_nameid NUMBER;
BEGIN
    -- Update STAFFS table
    UPDATE STAFFS
    SET PHONENUMBER = :NEW.PHONENUMBER,
        HIREDATE = :NEW.HIREDATE,
        TERMINATIONDATE = :NEW.TERMINATIONDATE,
        POSITION = :NEW.POSITION,
        EMPLOYMENTSTATUS = :NEW.EMPLOYMENTSTATUS
    WHERE STAFFID = :OLD.STAFFID;

    -- Update NAMES table and STAFF_NAME table if name changes
    IF (:OLD.FIRSTNAME != :NEW.FIRSTNAME OR :OLD.LASTNAME != :NEW.LASTNAME) THEN
        -- Insert new name record
        INSERT INTO NAMES (FIRSTNAME, LASTNAME)
        VALUES (:NEW.FIRSTNAME, :NEW.LASTNAME)
        RETURNING NAMEID INTO v_nameid;

        -- Update STAFF_NAME table to end old record and insert new link
        UPDATE STAFF_NAME
        SET ENDDATE = CURRENT_TIMESTAMP
        WHERE STAFFID = :OLD.STAFFID AND ENDDATE IS NULL;

        INSERT INTO STAFF_NAME (NAMEID, STAFFID, STARTDATE)
        VALUES (v_nameid, :OLD.STAFFID, CURRENT_TIMESTAMP);
    END IF;
END;
/

-- Create INSTEAD OF trigger for DELETE operation on the view
PROMPT Creating STAFF_VIEW_DELETE_TRIGGER...
CREATE OR REPLACE TRIGGER STAFF_VIEW_DELETE_TRIGGER
INSTEAD OF DELETE ON STAFF_VIEW
FOR EACH ROW
BEGIN
    DECLARE
        v_nameid NUMBER;
    BEGIN
        -- Get all NAMEID linked to STAFFID
        FOR name_rec IN (SELECT NAMEID FROM STAFF_NAME WHERE STAFFID = :OLD.STAFFID) LOOP
            -- Delete links in STAFF_NAME table
            DELETE FROM STAFF_NAME WHERE NAMEID = name_rec.NAMEID;

            -- Delete records in NAMES table
            DELETE FROM NAMES WHERE NAMEID = name_rec.NAMEID;
        END LOOP;

        -- Delete record in STAFFS table
        DELETE FROM STAFFS WHERE STAFFID = :OLD.STAFFID;
    END;
END;
/

INSERT INTO categories (CATEGORYNAME, DESCRIPTION) VALUES ('Tents', 'Camping tents of various sizes');
INSERT INTO categories (CATEGORYNAME, DESCRIPTION) VALUES ('Sleeping Bags', 'Comfortable sleeping bags for all seasons');
INSERT INTO categories (CATEGORYNAME, DESCRIPTION) VALUES ('Camping Furniture', 'Chairs, tables, and other camping furniture');
INSERT INTO categories (CATEGORYNAME, DESCRIPTION) VALUES ('Cooking Equipment', 'Stoves, grills, and utensils');
INSERT INTO categories (CATEGORYNAME, DESCRIPTION) VALUES ('Backpacks', 'Durable backpacks for hiking and camping');
INSERT INTO categories (CATEGORYNAME, DESCRIPTION) VALUES ('Lighting', 'Lanterns and flashlights');
INSERT INTO categories (CATEGORYNAME, DESCRIPTION) VALUES ('Water Gear', 'Kayaks, paddleboards, and life jackets');

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('2-Person Tent', 1, 'Available', 'Coleman', 15.00, 50.00, TO_DATE('2023-05-01', 'YYYY-MM-DD'), 150.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('4-Person Tent', 1, 'Available', 'Quechua', 20.00, 70.00, TO_DATE('2023-06-01', 'YYYY-MM-DD'), 200.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Family Tent (6-Person)', 1, 'Available', 'REI', 25.00, 100.00, TO_DATE('2023-03-01', 'YYYY-MM-DD'), 300.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Ultralight Tent (1-Person)', 1, 'Available', 'Big Agnes', 18.00, 60.00, TO_DATE('2022-12-01', 'YYYY-MM-DD'), 180.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Sleeping Bag - Summer', 2, 'Available', 'Marmot', 10.00, 30.00, TO_DATE('2023-04-01', 'YYYY-MM-DD'), 80.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Sleeping Bag - Winter', 2, 'Available', 'North Face', 12.00, 40.00, TO_DATE('2023-02-01', 'YYYY-MM-DD'), 100.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Sleeping Bag - Kids', 2, 'Available', 'Coleman', 8.00, 20.00, TO_DATE('2023-01-01', 'YYYY-MM-DD'), 60.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Double Sleeping Bag', 2, 'Available', 'Quechua', 15.00, 50.00, TO_DATE('2022-10-01', 'YYYY-MM-DD'), 150.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Folding Camping Chair', 3, 'Available', 'Helinox', 8.00, 20.00, TO_DATE('2022-08-01', 'YYYY-MM-DD'), 50.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Portable Camping Table', 3, 'Available', 'Coleman', 12.00, 30.00, TO_DATE('2023-06-01', 'YYYY-MM-DD'), 100.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Camping Stool', 3, 'Available', 'REI', 5.00, 10.00, TO_DATE('2022-09-01', 'YYYY-MM-DD'), 30.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Camping Hammock', 3, 'Available', 'Eagles Nest', 10.00, 25.00, TO_DATE('2022-11-01', 'YYYY-MM-DD'), 80.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Portable Stove', 4, 'Available', 'Camp Chef', 12.00, 40.00, TO_DATE('2022-12-01', 'YYYY-MM-DD'), 120.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Camping Grill', 4, 'Available', 'Weber', 15.00, 50.00, TO_DATE('2023-05-01', 'YYYY-MM-DD'), 150.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Cooking Utensils Set', 4, 'Available', 'GSI Outdoors', 8.00, 20.00, TO_DATE('2023-01-01', 'YYYY-MM-DD'), 60.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Camping Kettle', 4, 'Available', 'Primus', 6.00, 15.00, TO_DATE('2022-10-01', 'YYYY-MM-DD'), 40.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Hiking Backpack 40L', 5, 'Available', 'Osprey', 12.50, 30.00, TO_DATE('2023-05-01', 'YYYY-MM-DD'), 150.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Travel Backpack 30L', 5, 'Available', 'Deuter', 10.00, 25.00, TO_DATE('2023-04-01', 'YYYY-MM-DD'), 120.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Kids Camping Backpack', 5, 'Available', 'Kelty', 8.00, 20.00, TO_DATE('2022-08-15', 'YYYY-MM-DD'), 100.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Ultra-light Backpack 50L', 5, 'Available', 'Hyperlite', 15.00, 40.00, TO_DATE('2023-02-10', 'YYYY-MM-DD'), 180.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Waterproof Daypack 20L', 5, 'Available', 'Sea to Summit', 9.50, 22.00, TO_DATE('2022-11-20', 'YYYY-MM-DD'), 110.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Climbing Gear Backpack 45L', 5, 'Available', 'Black Diamond', 13.50, 35.00, TO_DATE('2023-03-05', 'YYYY-MM-DD'), 160.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('LED Camping Lantern', 6, 'Available', 'Goal Zero', 7.00, 18.00, TO_DATE('2022-09-12', 'YYYY-MM-DD'), 80.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Rechargeable Flashlight', 6, 'Available', 'Fenix', 6.50, 15.00, TO_DATE('2023-01-08', 'YYYY-MM-DD'), 70.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Headlamp 300 Lumens', 6, 'Available', 'Petzl', 8.00, 20.00, TO_DATE('2023-04-15', 'YYYY-MM-DD'), 90.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Solar Camping Light', 6, 'Available', 'LuminAID', 7.50, 18.00, TO_DATE('2022-10-01', 'YYYY-MM-DD'), 85.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Lantern with USB Charging', 6, 'Available', 'Coleman', 8.50, 22.00, TO_DATE('2023-02-20', 'YYYY-MM-DD'), 100.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Emergency LED Light', 6, 'Available', 'Black Diamond', 6.00, 14.00, TO_DATE('2023-03-18', 'YYYY-MM-DD'), 75.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Inflatable Kayak', 7, 'Available', 'Intex', 20.00, 50.00, TO_DATE('2022-07-15', 'YYYY-MM-DD'), 250.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Stand-Up Paddleboard', 7, 'Available', 'Red Paddle Co', 25.00, 60.00, TO_DATE('2023-06-10', 'YYYY-MM-DD'), 300.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Fishing Canoe', 7, 'Available', 'Old Town', 22.00, 55.00, TO_DATE('2023-05-01', 'YYYY-MM-DD'), 280.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Life Jacket - Adult', 7, 'Available', 'Onyx', 5.00, 12.00, TO_DATE('2022-08-20', 'YYYY-MM-DD'), 60.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Life Jacket - Kids', 7, 'Available', 'Stearns', 4.50, 10.00, TO_DATE('2022-09-15', 'YYYY-MM-DD'), 50.00);

INSERT INTO equipments (EQUIPMENTNAME, CATEGORYID, EQUIPMENTSTATUS, BRANDNAME, RENTALPRICEPERDAY, DEPOSITPRICE, PURCHASEDATE, EQUIPMENTPRICE)
VALUES ('Dry Bag 20L', 7, 'Available', 'Sea to Summit', 6.00, 15.00, TO_DATE('2023-03-25', 'YYYY-MM-DD'), 75.00);
PROMPT Script execution completed.
EXIT;
/